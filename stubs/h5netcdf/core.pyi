"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from .dimensions import Dimension

NOT_A_VARIABLE = ...
class CompatibilityError(Exception):
    """Raised when using features that are not part of the NetCDF4 API."""
    ...


class BaseVariable:
    def __init__(self, parent, name, dimensions=...) -> None:
        ...
    
    @property
    def name(self):
        """Return variable name."""
        ...
    
    @property
    def dimensions(self): # -> tuple[Unknown, ...] | tuple[Unknown]:
        """Return variable dimension names."""
        ...
    
    @property
    def shape(self): # -> tuple[Unknown, ...]:
        """Return current sizes of all variable dimensions."""
        ...
    
    @property
    def ndim(self): # -> int:
        """Return number variable dimensions"""
        ...
    
    def __len__(self):
        ...
    
    @property
    def dtype(self):
        """Return NumPy dtype object giving the variableâ€™s type."""
        ...
    
    def __array__(self, *args, **kwargs):
        ...
    
    def __getitem__(self, key): # -> ndarray[Any, dtype[Unknown]]:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    @property
    def attrs(self): # -> Attributes:
        """Return variable attributes."""
        ...
    
    _cls_name = ...
    def __repr__(self): # -> str:
        ...
    


class Variable(BaseVariable):
    @property
    def chunks(self):
        ...
    
    @property
    def compression(self):
        ...
    
    @property
    def compression_opts(self):
        ...
    
    @property
    def fletcher32(self):
        ...
    
    @property
    def shuffle(self):
        ...
    


class _LazyObjectLookup(Mapping):
    def __init__(self, parent, object_cls) -> None:
        ...
    
    def __setitem__(self, name, obj): # -> None:
        ...
    
    def add(self, name): # -> None:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, key):
        ...
    


class Group(Mapping):
    _variable_cls = Variable
    _dimension_cls = Dimension
    def __init__(self, parent, name) -> None:
        """Create netCDF4 group.

        Groups are containers by which the netCDF4 (HDF5) files are organized.
        Each group is like a Dataset itself.
        """
        ...
    
    @property
    def name(self):
        ...
    
    @property
    def dimensions(self): # -> Dimensions:
        ...
    
    @dimensions.setter
    def dimensions(self, value): # -> None:
        ...
    
    def create_group(self, name):
        """Create NetCDF4 group.

        Parameters
        ----------
        name : str
            Name of new group.
        """
        ...
    
    def create_variable(self, name, dimensions=..., dtype=..., data=..., fillvalue=..., chunks=..., chunking_heuristic=..., **kwargs):
        """Creates a new variable.

        Parameters
        ----------
        name : str
            Name of the new variable. If given as a path, intermediate groups will be created,
            if not existent.
        dimensions : tuple
            Tuple containing dimension name strings. Defaults to empty tuple, effectively
            creating a scalar variable.
        dtype : numpy.dtype, str, optional
            Dataype of the new variable. Defaults to None.
        fillvalue : scalar, optional
            Specify fillvalue for uninitialized parts of the variable. Defaults to ``None``.
        chunks : tuple, optional
            Tuple of integers specifying the chunksizes of each variable dimension.
        chunking_heuristic : str, optional
            Specify auto-chunking approach. Can be either of ``h5py`` or ``h5netcdf``. Defaults to
            ``h5netcdf``. Discussion on ``h5netcdf`` chunking can be found in (:issue:`52`)
            and (:pull:`127`).
        compression : str, optional
            Compression filter to apply, defaults to ``gzip``
        compression_opts : int
            Parameter for compression filter. For ``compression="gzip"`` Integer from 1 to 9 specifying
            the compression level. Defaults to 4.
        fletcher32 : bool
            If ``True``, HDF5 Fletcher32 checksum algorithm is applied. Defaults to ``False``.
        shuffle : bool, optional
            If ``True``, HDF5 shuffle filter will be applied. Defaults to ``True``.

        Note
        ----
        Please refer to ``h5py`` `documentation`_ for further parameters via keyword arguments.
        Any parameterizations which do not adhere to netCDF4 standard will only work on files
        created with ``invalid_netcdf=True``,

        .. _documentation: https://docs.h5py.org/en/stable/high/dataset.html#creating-datasets


        Returns
        -------
        var : h5netcdf.Variable
            Variable class instance
        """
        ...
    
    def __getitem__(self, key): # -> Self@Group:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def parent(self): # -> Unknown | None:
        ...
    
    def flush(self): # -> None:
        ...
    
    sync = ...
    @property
    def groups(self): # -> Frozen:
        ...
    
    @property
    def variables(self): # -> Frozen:
        ...
    
    @property
    def dims(self): # -> Frozen:
        ...
    
    @property
    def attrs(self): # -> Attributes:
        ...
    
    _cls_name = ...
    def __repr__(self): # -> str:
        ...
    
    def resize_dimension(self, dim, size): # -> None:
        """Resize a dimension to a certain size.

        It will pad with the underlying HDF5 data sets' fill values (usually
        zero) where necessary.
        """
        ...
    


class File(Group):
    def __init__(self, path, mode=..., invalid_netcdf=..., phony_dims=..., **kwargs) -> None:
        """NetCDF4 file constructor.

        Parameters
        ----------
        path: path-like
            Location of the netCDF4 file to be accessed.

        mode: "r", "r+", "a", "w"
            A valid file access mode. Defaults to "r".

        invalid_netcdf: bool
            Allow writing netCDF4 with data types and attributes that would
            otherwise not generate netCDF4 files that can be read by other
            applications. See :ref:`invalid netcdf` for more details.

        phony_dims: 'sort', 'access'
            See :ref:`phony dims` for more details.

        track_order: bool
            Corresponds to the h5py.File `track_order` parameter. Unless
            specified, the library will choose a default that enhances
            compatibility with netCDF4-c. If h5py version 3.7.0 or greater is
            installed, this parameter will be set to True by default.
            track_order is required to be true to for netCDF4-c libraries to
            append to a file. If an older version of h5py is detected, this
            parameter will be set to False by default to work around a bug in
            h5py limiting the number of attributes for a given variable.

        **kwargs:
            Additional keyword arguments to be passed to the ``h5py.File``
            constructor.

        Notes
        -----
        In h5netcdf version 0.12.0 and earlier, order tracking was disabled in
        HDF5 file. As this is a requirement for the current netCDF4 standard,
        it has been enabled without deprecation as of version 0.13.0 (:issue:`128`).

        Datasets created with h5netcdf version 0.12.0 that are opened with
        newer versions of h5netcdf will continue to disable order tracker.
        """
        ...
    
    @property
    def mode(self): # -> Literal['r+', 'r']:
        ...
    
    @property
    def filename(self): # -> str:
        ...
    
    @property
    def parent(self): # -> None:
        ...
    
    def flush(self): # -> None:
        ...
    
    sync = ...
    def close(self): # -> None:
        ...
    
    __del__ = ...
    def __enter__(self): # -> Self@File:
        ...
    
    def __exit__(self, type, value, traceback): # -> None:
        ...
    
    _cls_name = ...
    def __repr__(self): # -> str:
        ...
    


