"""
This type stub file was generated by pyright.
"""

import math
import uncertainties.core as uncert_core

"""
Implementation of umath.py, with internals.
"""
many_scalars_to_scalar_funcs = ...
num_deriv_funcs = ...
locally_cst_funcs = ...
non_std_wrapped_funcs = ...
def wraps(wrapper, wrapped, assigned=..., updated=...):
    """Update a wrapper function to look like the wrapped function.

    wrapper -- function to be updated
    wrapped -- original function
    assigned -- tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function
    updated -- tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function.
    """
    ...

def log_der0(*args):
    """
    Derivative of math.log() with respect to its first argument.

    Works whether 1 or 2 arguments are given.
    """
    ...

erf_coef = ...
fixed_derivatives = ...
this_module = ...
def wrap_locally_cst_func(func): # -> (*args: Unknown, **kwargs: Unknown) -> Unknown:
    '''
    Return a function that returns the same arguments as func, but
    after converting any AffineScalarFunc object to its nominal value.

    This function is useful for wrapping functions that are locally
    constant: the uncertainties should have no role in the result
    (since they are supposed to keep the function linear and hence,
    here, constant).
    '''
    ...

factorial = ...
original_func = ...
def wrapped_fsum(): # -> (arg_list: Unknown) -> (Unknown | _NotImplementedType | AffineScalarFunc):
    """
    Return an uncertainty-aware version of math.fsum, which must
    be contained in _original_func.
    """
    ...

fsum = ...
@uncert_core.set_doc(math.modf.__doc__)
def modf(x): # -> tuple[AffineScalarFunc, float] | tuple[float, float]:
    """
    Version of modf that works for numbers with uncertainty, and also
    for regular numbers.
    """
    ...

@uncert_core.set_doc(math.ldexp.__doc__)
def ldexp(x, i): # -> AffineScalarFunc | float:
    ...

@uncert_core.set_doc(math.frexp.__doc__)
def frexp(x): # -> tuple[AffineScalarFunc, int] | tuple[float, int]:
    """
    Version of frexp that works for numbers with uncertainty, and also
    for regular numbers.
    """
    ...

__all__ = many_scalars_to_scalar_funcs + non_std_wrapped_funcs
