"""
This type stub file was generated by pyright.
"""

import uncertainties.core as uncert_core

"""
Tests of the code in uncertainties/__init__.py.

These tests can be run through the Nose testing framework.

(c) 2010-2016 by Eric O. LEBIGOT (EOL).
"""
def numbers_close(x, y, tolerance=...): # -> bool:
    """
    Returns True if the given floats are close enough.

    The given tolerance is the relative difference allowed, or the absolute
    difference, if one of the numbers is 0.

    NaN is allowed: it is considered close to itself.
    """
    ...

def ufloats_close(x, y, tolerance=...): # -> bool:
    '''
    Tests if two numbers with uncertainties are close, as random
    variables: this is stronger than testing whether their nominal
    value and standard deviation are close.

    The tolerance is applied to both the nominal value and the
    standard deviation of the difference between the numbers.
    '''
    ...

class DerivativesDiffer(Exception):
    ...


def compare_derivatives(func, numerical_derivatives, num_args_list=...):
    """
    Checks the derivatives of a function 'func' (as returned by the
    wrap() wrapper), by comparing them to the
    'numerical_derivatives' functions.

    Raises a DerivativesDiffer exception in case of problem.

    These functions all take the number of arguments listed in
    num_args_list.  If num_args is None, it is automatically obtained.

    Tests are done on random arguments.
    """
    ...

def test_value_construction(): # -> None:
    '''
    Tests the various means of constructing a constant number with
    uncertainty *without a string* (see test_ufloat_fromstr(), for this).
    '''
    ...

def test_ufloat_fromstr(): # -> None:
    "Input of numbers with uncertainties as a string"
    ...

def test_fixed_derivatives_basic_funcs(): # -> None:
    """
    Pre-calculated derivatives for operations on AffineScalarFunc.
    """
    ...

def test_copy(): # -> None:
    "Standard copy module integration"
    ...

class NewVariable_dict(uncert_core.Variable):
    ...


class NewVariable_slots_tuple(uncert_core.Variable):
    __slots__ = ...


class NewVariable_slots_str(uncert_core.Variable):
    __slots__ = ...


def test_pickling(): # -> None:
    "Standard pickle module integration."
    ...

def test_int_div(): # -> None:
    "Integer division"
    ...

def test_comparison_ops(): # -> None:
    "Test of comparison operators"
    ...

def test_logic(): # -> None:
    "Boolean logic: __nonzero__, bool."
    ...

def test_obsolete(): # -> None:
    'Tests some obsolete creation of number with uncertainties'
    ...

def test_basic_access_to_data(): # -> None:
    "Access to data from Variable and AffineScalarFunc objects."
    ...

def test_correlations(): # -> None:
    "Correlations between variables"
    ...

def test_no_coercion(): # -> None:
    """
    Coercion of Variable object to a simple float.

    The coercion should be impossible, like for complex numbers.
    """
    ...

def test_wrapped_func_no_args_no_kwargs(): # -> None:
    '''
    Wrap a function that takes only positional-or-keyword parameters.
    '''
    ...

def test_wrapped_func_args_no_kwargs(): # -> None:
    '''
    Wrap a function that takes only positional-or-keyword and
    var-positional parameters.
    '''
    ...

def test_wrapped_func_no_args_kwargs(): # -> None:
    '''
    Wrap a function that takes only positional-or-keyword and
    var-keyword parameters.
    '''
    ...

def test_wrapped_func_args_kwargs(): # -> None:
    '''
    Wrap a function that takes positional-or-keyword, var-positional
    and var-keyword parameters.
    '''
    ...

def test_wrapped_func(): # -> None:
    """
    Test uncertainty-aware functions obtained through wrapping.
    """
    ...

def test_wrap_with_kwargs(): # -> None:
    '''
    Tests wrap() on functions with keyword arguments.

    Includes both wrapping a function that takes optional keyword
    arguments and calling a wrapped function with keyword arguments
    (optional or not).
    '''
    class FunctionCalled(Exception):
        '''
        Raised to signal that a function is indeed called.
        '''
        ...
    
    

def test_access_to_std_dev(): # -> None:
    "Uniform access to the standard deviation"
    ...

def test_covariances(): # -> None:
    "Covariance matrix"
    ...

def test_power_all_cases(): # -> None:
    '''
    Checks all cases for the value and derivatives of x**p.
    '''
    ...

def power_all_cases(op): # -> None:
    '''
    Checks all cases for the value and derivatives of power-like
    operator op (op is typically the built-in pow(), or math.pow()).

    Checks only the details of special results like 0, 1 or NaN).

    Different cases for the value of x**p and its derivatives are
    tested by dividing the (x, p) plane with:

    - x < 0, x = 0, x > 0
    - p integer or not, p < 0, p = 0, p > 0

    (not all combinations are distinct: for instance x > 0 gives
    identical formulas for all p).
    '''
    ...

def test_power_special_cases(): # -> None:
    '''
    Checks special cases of x**p.
    '''
    ...

def power_special_cases(op): # -> None:
    '''
    Checks special cases of the uncertainty power operator op (where
    op is typically the built-in pow or uncertainties.umath.pow).

    The values x = 0, x = 1 and x = NaN are special, as are null,
    integral and NaN values of p.
    '''
    ...

def test_power_wrt_ref(): # -> None:
    '''
    Checks special cases of the built-in pow() power operator.
    '''
    ...

def power_wrt_ref(op, ref_op): # -> None:
    '''
    Checks special cases of the uncertainty power operator op (where
    op is typically the built-in pow or uncertainties.umath.pow), by
    comparing its results to the reference power operator ref_op
    (which is typically the built-in pow or math.pow).
    '''
    ...

def test_PDG_precision(): # -> None:
    '''
    Test of the calculation of the number of significant digits for
    the uncertainty.
    '''
    ...

def test_repr(): # -> None:
    '''Test the representation of numbers with uncertainty.'''
    ...

def test_format(): # -> None:
    '''Test the formatting of numbers with uncertainty.'''
    ...

def test_unicode_format(): # -> None:
    '''Test of the unicode formatting of numbers with uncertainties'''
    ...

def test_custom_pretty_print_and_latex(): # -> None:
    '''Test of the pretty-print and LaTeX format customizations'''
    ...

