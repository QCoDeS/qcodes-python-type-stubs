"""
This type stub file was generated by pyright.
"""

import numpy

"""
Core functions used by unumpy and some of its submodules.

(c) 2010-2016 by Eric O. LEBIGOT (EOL).
"""
__all__ = ['uarray', 'umatrix', 'nominal_values', 'std_devs', 'matrix']
to_nominal_values = ...
to_std_devs = ...
def unumpy_to_numpy_matrix(arr): # -> matrix[Unknown, Unknown]:
    """
    If arr in a unumpy.matrix, it is converted to a numpy.matrix.
    Otherwise, it is returned unchanged.
    """
    ...

def nominal_values(arr): # -> matrix[Unknown, Unknown] | Any:
    """
    Return the nominal values of the numbers in NumPy array arr.

    Elements that are not numbers with uncertainties (derived from a
    class from this module) are passed through untouched (because a
    numpy.array can contain numbers with uncertainties and pure floats
    simultaneously).

    If arr is of type unumpy.matrix, the returned array is a
    numpy.matrix, because the resulting matrix does not contain
    numbers with uncertainties.
    """
    ...

def std_devs(arr): # -> matrix[Unknown, Unknown] | Any:
    """
    Return the standard deviations of the numbers in NumPy array arr.

    Elements that are not numbers with uncertainties (derived from a
    class from this module) are passed through untouched (because a
    numpy.array can contain numbers with uncertainties and pure floats
    simultaneously).

    If arr is of type unumpy.matrix, the returned array is a
    numpy.matrix, because the resulting matrix does not contain
    numbers with uncertainties.
    """
    ...

def derivative(u, var): # -> float:
    """
    Return the derivative of u along var, if u is an
    uncert_core.AffineScalarFunc instance, and if var is one of the
    variables on which it depends.  Otherwise, return 0.
    """
    ...

def wrap_array_func(func): # -> (arr: Unknown, *args: Unknown, **kwargs: Unknown) -> (Unknown | Any):
    """
    Return a version of the function func() that works even when
    func() is given a NumPy array that contains numbers with
    uncertainties, as first argument.

    This wrapper is similar to uncertainties.core.wrap(), except that
    it handles an array argument instead of float arguments, and that
    the result can be an array.

    However, the returned function is more restricted: the array
    argument cannot be given as a keyword argument with the name in
    the original function (it is not a drop-in replacement).

    func -- function whose first argument is a single NumPy array,
    and which returns a NumPy array.
    """
    ...

def uarray(nominal_values, std_devs=...): # -> Any:
    """
    Return a NumPy array of numbers with uncertainties
    initialized with the given nominal values and standard
    deviations.

    nominal_values, std_devs -- valid arguments for numpy.array, with
    identical shapes (list of numbers, list of lists, numpy.ndarray,
    etc.).

    std_devs=None is only used for supporting legacy code, where
    nominal_values can be the tuple of nominal values and standard
    deviations.
    """
    ...

def array_derivative(array_like, var): # -> Any:
    """
    Return the derivative of the given array with respect to the
    given variable.

    The returned derivative is a NumPy ndarray of the same shape as
    array_like, that contains floats.

    array_like -- array-like object (list, etc.)  that contains
    scalars or numbers with uncertainties.

    var -- Variable object.
    """
    ...

def func_with_deriv_to_uncert_func(func_with_derivatives): # -> (array_like: Unknown, *args: Unknown, **kwargs: Unknown) -> (Unknown | matrix | Any):
    """
    Return a function that can be applied to array-like objects that
    contain numbers with uncertainties (lists, lists of lists, NumPy
    arrays, etc.).

    func_with_derivatives -- defines a function that takes an
    array-like object containing scalars and returns an array.  Both
    the value and the derivatives of this function with respect to
    multiple scalar parameters are calculated by this
    func_with_derivatives() argument.

    func_with_derivatives(arr, input_type, derivatives, *args,
    **kwargs) must return an iterator.  The first element returned by
    this iterator is the value of the function at the n-dimensional
    array-like 'arr' (with the correct type).  The following elements
    are arrays that represent the derivative of the function for each
    derivative array from the iterator 'derivatives'.

    func_with_derivatives() takes the following arguments:

      arr -- NumPy ndarray of scalars where the function must be
      evaluated.

      input_type -- data type of the input array-like object.  This
      type is used for determining the type that the function should
      return.

      derivatives -- iterator that returns the derivatives of the
      argument of the function with respect to multiple scalar
      variables.  func_with_derivatives() returns the derivatives of
      the defined function with respect to these variables.

      args -- additional arguments that define the result (example:
      for the pseudo-inverse numpy.linalg.pinv: numerical cutoff).

    Examples of func_with_derivatives: inv_with_derivatives().
    """
    ...

def inv_with_derivatives(arr, input_type, derivatives): # -> Generator[matrix[Unknown, Unknown] | NDArray[float64] | NDArray[bool_], None, None]:
    """
    Defines the matrix inverse and its derivatives.

    See the definition of func_with_deriv_to_uncert_func() for its
    detailed semantics.
    """
    ...

inv = ...
def pinv_with_derivatives(arr, input_type, derivatives, rcond): # -> Generator[matrix[Unknown, Unknown] | NDArray[float64] | Unknown, None, None]:
    """
    Defines the matrix pseudo-inverse and its derivatives.

    Works with real or complex matrices.

    See the definition of func_with_deriv_to_uncert_func() for its
    detailed semantics.
    """
    ...

pinv_with_uncert = ...
def pinv(array_like, rcond=...): # -> matrix | Any:
    ...

pinv = ...
class CallableStdDevs(numpy.matrix):
    '''
    Class for standard deviation results, which used to be
    callable. Provided for compatibility with old code. Issues an
    obsolescence warning upon call.

    New objects must be created by passing an existing
    '''
    def __new__(cls, matrix):
        ...
    
    def __call__(self): # -> Self@CallableStdDevs:
        ...
    


class matrix(numpy.matrix):
    """
    Class equivalent to numpy.matrix, but that behaves better when the
    matrix contains numbers with uncertainties.
    """
    def __rmul__(self, other):
        ...
    
    def getI(self): # -> matrix | Any:
        """Matrix inverse or pseudo-inverse."""
        ...
    
    I = ...
    @property
    def nominal_values(self): # -> matrix[Unknown, Unknown] | Any:
        """
        Nominal value of all the elements of the matrix.
        """
        ...
    
    @property
    def std_devs(self): # -> matrix[Unknown, Unknown] | Any:
        ...
    


def umatrix(nominal_values, std_devs=...): # -> Any:
    """
    Constructs a matrix that contains numbers with uncertainties.

    The arguments are the same as for uarray(...): nominal values, and
    standard deviations.

    The returned matrix can be inverted, thanks to the fact that it is
    a unumpy.matrix object instead of a numpy.matrix one.
    """
    ...

def define_vectorized_funcs(): # -> None:
    """
    Defines vectorized versions of functions from uncertainties.umath_core.

    Some functions have their name translated, so as to follow NumPy's
    convention (example: math.acos -> numpy.arccos).
    """
    ...

