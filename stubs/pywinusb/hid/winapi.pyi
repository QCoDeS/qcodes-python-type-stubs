"""
This type stub file was generated by pyright.
"""

import platform
from ctypes import Structure, Union, c_ubyte, c_uint, c_wchar
from ctypes.wintypes import HANDLE, WCHAR

UCHAR = c_ubyte
ENUM = c_uint
TCHAR = WCHAR
if platform.architecture()[0].startswith('64'):
    WIN_PACK = ...
else:
    WIN_PACK = ...
class WinApiException(Exception):
    "Rough Windows API exception type"
    ...


def winapi_result(result):
    """Validate WINAPI BOOL result, raise exception if failed"""
    ...

setup_api = ...
hid_dll = ...
kernel32 = ...
ReadFile = ...
CancelIo = ...
WriteFile = ...
CloseHandle = ...
SetEvent = ...
WaitForSingleObject = ...
c_tchar = c_wchar
CreateFile = ...
CreateEvent = ...
CM_Get_Device_ID = ...
b_verbose = ...
usb_verbose = ...
class GUID(Structure):
    """GUID Windows OS structure"""
    _pack_ = ...
    _fields_ = ...


class OVERLAPPED(Structure):
    class OFFSET_OR_HANDLE(Union):
        class OFFSET(Structure):
            _fields_ = ...
        
        
        _fields_ = ...
    
    
    _fields_ = ...


class SP_DEVICE_INTERFACE_DATA(Structure):
    """
    typedef struct _SP_DEVICE_INTERFACE_DATA {
      DWORD     cbSize;
      GUID      InterfaceClassGuid;
      DWORD     Flags;
      ULONG_PTR Reserved;
    } SP_DEVICE_INTERFACE_DATA, *PSP_DEVICE_INTERFACE_DATA;
    """
    _pack_ = ...
    _fields_ = ...


class SP_DEVICE_INTERFACE_DETAIL_DATA(Structure):
    """
    typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA {
      DWORD cbSize;
      TCHAR DevicePath[ANYSIZE_ARRAY];
    } SP_DEVICE_INTERFACE_DETAIL_DATA, *PSP_DEVICE_INTERFACE_DETAIL_DATA;
    """
    _pack_ = ...
    _fields_ = ...
    def get_string(self): # -> str:
        """Retreive stored string"""
        ...
    


class SP_DEVINFO_DATA(Structure):
    """
    typedef struct _SP_DEVINFO_DATA {
      DWORD     cbSize;
      GUID      ClassGuid;
      DWORD     DevInst;
      ULONG_PTR Reserved;
    } SP_DEVINFO_DATA, *PSP_DEVINFO_DATA;
    """
    _pack_ = ...
    _fields_ = ...


SetupDiGetDeviceInterfaceDetail = ...
SetupDiGetDeviceInstanceId = ...
SetupDiGetClassDevs = ...
SetupDiGetDeviceRegistryProperty = ...
SetupDiDestroyDeviceInfoList = ...
SetupDiEnumDeviceInterfaces = ...
class DIGCF:
    """
    Flags controlling what is included in the device information set built
    by SetupDiGetClassDevs
    """
    DEFAULT = ...
    PRESENT = ...
    ALLCLASSES = ...
    PROFILE = ...
    DEVICEINTERFACE = ...


class HIDD_ATTRIBUTES(Structure):
    _fields_ = ...


class HIDP_CAPS(Structure):
    _fields_ = ...


class HIDP_BUTTON_CAPS(Structure):
    class RANGE_NOT_RANGE(Union):
        class RANGE(Structure):
            _fields_ = ...
        
        
        class NOT_RANGE(Structure):
            _fields_ = ...
        
        
        _fields_ = ...
    
    
    _fields_ = ...


class HIDP_VALUE_CAPS(Structure):
    class RANGE_NOT_RANGE(Union):
        class RANGE(Structure):
            _fields_ = ...
        
        
        class NOT_RANGE(Structure):
            _fields_ = ...
        
        
        _fields_ = ...
    
    
    _fields_ = ...


class HIDP_DATA(Structure):
    class HIDP_DATA_VALUE(Union):
        _fields_ = ...
    
    
    _fields_ = ...


HidP_Input = ...
HidP_Output = ...
HidP_Feature = ...
FACILITY_HID_ERROR_CODE = ...
def HIDP_ERROR_CODES(sev, code):
    ...

class HidStatus:
    HIDP_STATUS_SUCCESS = ...
    HIDP_STATUS_NULL = ...
    HIDP_STATUS_INVALID_PREPARSED_DATA = ...
    HIDP_STATUS_INVALID_REPORT_TYPE = ...
    HIDP_STATUS_INVALID_REPORT_LENGTH = ...
    HIDP_STATUS_USAGE_NOT_FOUND = ...
    HIDP_STATUS_VALUE_OUT_OF_RANGE = ...
    HIDP_STATUS_BAD_LOG_PHY_VALUES = ...
    HIDP_STATUS_BUFFER_TOO_SMALL = ...
    HIDP_STATUS_INTERNAL_ERROR = ...
    HIDP_STATUS_I8042_TRANS_UNKNOWN = ...
    HIDP_STATUS_INCOMPATIBLE_REPORT_ID = ...
    HIDP_STATUS_NOT_VALUE_ARRAY = ...
    HIDP_STATUS_IS_VALUE_ARRAY = ...
    HIDP_STATUS_DATA_INDEX_NOT_FOUND = ...
    HIDP_STATUS_DATA_INDEX_OUT_OF_RANGE = ...
    HIDP_STATUS_BUTTON_NOT_PRESSED = ...
    HIDP_STATUS_REPORT_DOES_NOT_EXIST = ...
    HIDP_STATUS_NOT_IMPLEMENTED = ...
    error_message_dict = ...
    def __init__(self, error_code) -> None:
        ...
    


WAIT_ABANDONED = ...
WAIT_OBJECT_0 = ...
WAIT_TIMEOUT = ...
WAIT_FAILED = ...
INFINITE = ...
GENERIC_READ = ...
GENERIC_WRITE = ...
FILE_SHARE_READ = ...
FILE_SHARE_WRITE = ...
OPEN_EXISTING = ...
OPEN_ALWAYS = ...
INVALID_HANDLE_VALUE = HANDLE(-1)
FILE_FLAG_OVERLAPPED = ...
FILE_ATTRIBUTE_NORMAL = ...
NO_ERROR = ...
ERROR_IO_PENDING = ...
def GetHidGuid(): # -> GUID:
    "Get system-defined GUID for HIDClass devices"
    ...

class DeviceInterfaceSetInfo:
    """Context manager for SetupDiGetClassDevs / SetupDiDestroyDeviceInfoList
    resource allocation / cleanup
    """
    def __init__(self, guid_target) -> None:
        ...
    
    def __enter__(self): # -> Any:
        """Context manager initializer, calls self.open()"""
        ...
    
    def open(self): # -> Any:
        """
        Calls SetupDiGetClassDevs to obtain a handle to an opaque device
        information set that describes the device interfaces supported by all
        the USB collections currently installed in the system. The
        application should specify DIGCF.PRESENT and DIGCF.INTERFACEDEVICE
        in the Flags parameter passed to SetupDiGetClassDevs.
        """
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        """Context manager clean up, calls self.close()"""
        ...
    
    def close(self): # -> None:
        """Destroy allocated storage"""
        ...
    


def enum_device_interfaces(h_info, guid): # -> Generator[SP_DEVICE_INTERFACE_DATA, None, None]:
    """Function generator that returns a device_interface_data enumerator
    for the given device interface info and GUID parameters
    """
    ...

def get_device_path(h_info, interface_data, ptr_info_data=...): # -> str:
    """"Returns Hardware device path
    Parameters:
        h_info,         interface set info handler
        interface_data, device interface enumeration data
        ptr_info_data,  pointer to SP_DEVINFO_DATA() instance to receive details
    """
    ...

