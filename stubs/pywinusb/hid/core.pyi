"""
This type stub file was generated by pyright.
"""

import sys
import threading
from ctypes import c_ushort
from . import helpers, winapi

"""
This is the main module, the main interface classes and functions
are available in the top level hid package
"""
if sys.version_info >= (3, ):
    ...
else:
    ...
HIDError = helpers.HIDError
setup_api = ...
hid_dll = ...
HidP_Input = ...
HidP_Output = ...
HidP_Feature = ...
HidStatus = winapi.HidStatus
MAX_HID_STRING_LENGTH = ...
if nothasattr(threading.Thread, "is_alive"):
    ...
USAGE = c_ushort
INVALID_HANDLE_VALUE = ...
USAGE_EVENTS = ...
def get_full_usage_id(page_id, usage_id):
    """Convert to composite 32 bit page and usage ids"""
    ...

def get_usage_page_id(full_usage_id):
    """Extract 16 bits page id from full usage id (32 bits)"""
    ...

def get_short_usage_id(full_usage_id):
    """Extract 16 bits usage id from full usage id (32 bits)"""
    ...

def hid_device_path_exists(device_path, guid=...): # -> bool:
    """Test if required device_path is still valid
    (HID device connected to host)
    """
    ...

def find_all_hid_devices(): # -> list[Unknown]:
    "Finds all HID devices connected to the system"
    ...

class HidDeviceFilter:
    """This class allows searching for HID devices currently connected to
    the system, it also allows to search for specific devices  (by filtering)
    """
    def __init__(self, **kwrds) -> None:
        """Initialize filter from a named target parameters.
        I.e. product_id=0x0123
        """
        ...
    
    def get_devices_by_parent(self, hid_filter=...): # -> dict[Unknown, Unknown]:
        """Group devices returned from filter query in order \
        by devcice parent id.
        """
        ...
    
    def get_devices(self, hid_filter=...): # -> list[Unknown] | dict[Unknown, Unknown] | None:
        """Filter a HID device list by current object parameters. Devices
        must match the all of the filtering parameters
        """
        ...
    


MAX_DEVICE_ID_LEN = ...
class HidDeviceBaseClass:
    "Utility parent class for main HID device class"
    _raw_reports_lock = ...
    def __init__(self) -> None:
        "initializer"
        ...
    


class HidDevice(HidDeviceBaseClass):
    """This class is the main interface to physical HID devices"""
    MAX_MANUFACTURER_STRING_LEN = ...
    MAX_PRODUCT_STRING_LEN = ...
    MAX_SERIAL_NUMBER_LEN = ...
    filter_attributes = ...
    def get_parent_instance_id(self): # -> int:
        """Retreive system instance id (numerical value)"""
        ...
    
    def get_parent_device(self): # -> Any | Literal['']:
        """Retreive parent device string id"""
        ...
    
    def __init__(self, device_path, parent_instance_id=..., instance_id=...) -> None:
        "Interface for HID device as referenced by device_path parameter"
        ...
    
    def is_active(self): # -> bool:
        """Poll if device is still valid"""
        ...
    
    def open(self, output_only=..., shared=...): # -> None:
        """Open HID device and obtain 'Collection Information'.
        It effectively prepares the HidDevice object for reading and writing
        """
        ...
    
    def get_physical_descriptor(self): # -> list[Any]:
        """Returns physical HID device descriptor
        """
        ...
    
    def send_output_report(self, data): # -> Any | Literal[True]:
        """Send input/output/feature report ID = report_id, data should be a
        c_ubyte object with included the required report data
        """
        ...
    
    def send_feature_report(self, data): # -> Any:
        """Send input/output/feature report ID = report_id, data should be a
        c_byte object with included the required report data
        """
        ...
    
    def is_plugged(self): # -> bool:
        """Check if device still plugged to USB host"""
        ...
    
    def is_opened(self): # -> bool:
        """Check if device path resource open status"""
        ...
    
    def close(self): # -> None:
        """Release system resources"""
        ...
    
    def count_all_feature_reports(self): # -> Any:
        """Retreive total number of available feature reports"""
        ...
    
    def find_input_reports(self, usage_page=..., usage_id=...): # -> list[Unknown]:
        "Find input reports referencing HID usage item"
        ...
    
    def find_output_reports(self, usage_page=..., usage_id=...): # -> list[Unknown]:
        "Find output report referencing HID usage control/data item"
        ...
    
    def find_feature_reports(self, usage_page=..., usage_id=...): # -> list[Unknown]:
        "Find feature report referencing HID usage control/data item"
        ...
    
    def find_any_reports(self, usage_page=..., usage_id=...): # -> dict[int, list[Unknown]]:
        """Find any report type referencing HID usage control/data item.
        Results are returned in a dictionary mapping report_type to usage
        lists.
        """
        ...
    
    max_input_queue_size = ...
    evt_decision = ...
    def set_raw_data_handler(self, funct): # -> None:
        "Set external raw data handler, set to None to restore default"
        ...
    
    def find_input_usage(self, full_usage_id): # -> None:
        """Check if full usage Id included in input reports set
        Parameters:
            full_usage_id       Full target usage, use get_full_usage_id

        Returns:
            Report ID as integer value, or None if report does not exist with
            target usage. Nottice that report ID 0 is a valid report.
        """
        ...
    
    def add_event_handler(self, full_usage_id, handler_function, event_kind=..., aux_data=...): # -> bool:
        """Add event handler for usage value/button changes,
        returns True if the handler function was updated"""
        ...
    
    class InputReportQueue:
        """Multi-threaded queue. Allows to queue reports from reading thread"""
        def __init__(self, max_size, report_size) -> None:
            ...
        
        def get_new(self): # -> Array[c_ubyte] | None:
            "Allocates storage for input report"
            ...
        
        def reuse(self, raw_report): # -> None:
            "Reuse not posted report"
            ...
        
        def post(self, raw_report): # -> None:
            """Used by reading thread to post a new input report."""
            ...
        
        def get(self): # -> None:
            """Used to retreive one report form the queue"""
            ...
        
        def release_events(self): # -> None:
            """Release thread locks."""
            ...
        
    
    
    class InputReportProcessingThread(threading.Thread):
        "Input reports handler helper class"
        def __init__(self, hid_object) -> None:
            ...
        
        def abort(self): # -> None:
            """Cancel processing."""
            ...
        
        def run(self): # -> None:
            """Start collecting input reports and post it to subscribed
            Hid device"""
            ...
        
    
    
    class InputReportReaderThread(threading.Thread):
        "Helper to receive input reports"
        def __init__(self, hid_object, raw_report_size) -> None:
            ...
        
        def abort(self): # -> None:
            """Stop collectiong reports."""
            ...
        
        def is_active(self): # -> bool:
            "main reading loop is running (bool)"
            ...
        
        def run(self): # -> None:
            ...
        
    
    
    def __repr__(self): # -> str:
        ...
    


class ReportItem:
    """Represents a single usage field in a report."""
    def __init__(self, hid_report, caps_record, usage_id=...) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __setitem__(self, index, value): # -> None:
        "Allow to access value array by index"
        ...
    
    def __getitem__(self, index):
        "Allow to access value array by index"
        ...
    
    def set_value(self, value): # -> None:
        """Set usage value within report"""
        ...
    
    def get_value(self): # -> list[Unknown] | int | Array[c_ubyte]:
        """Retreive usage value within report"""
        ...
    
    value = ...
    @property
    def value_array(self): # -> int | Array[c_ubyte]:
        """Retreive usage value as value array"""
        ...
    
    def key(self):
        "returns unique usage page & id long value"
        ...
    
    def is_value(self):
        """Validate if usage is value (not 'button')"""
        ...
    
    def is_button(self):
        """Validate if usage is button (not value)"""
        ...
    
    def is_value_array(self): # -> bool:
        """Validate if usage was described as value array"""
        ...
    
    def get_usage_string(self): # -> Any | Literal['']:
        """Returns usage representation string (as embedded in HID device
        if available)
        """
        ...
    
    @property
    def report_id(self):
        """Retreive Report Id numeric value"""
        ...
    
    def __repr__(self): # -> str:
        ...
    


class HidReport:
    """This class interfaces an actual HID physical report, providing a wrapper
    that exposes specific usages (usage page and usage ID) as a usage_id value
    map (dictionary).

    Example: A HID device might have an output report ID = 0x01, with the
    following usages; 0x20 as a boolean (button), and 0x21 as a 3 bit value,
    then querying the HID object for the output report (by using
    hid_object.get_output_report(0x01))
    """
    def __init__(self, hid_object, report_type, report_id) -> None:
        ...
    
    __report_kind_dict = ...
    @property
    def report_id(self): # -> int:
        """Retreive asociated report Id value"""
        ...
    
    @property
    def report_type(self): # -> str:
        """Retreive report type as numeric value (input, output, feature)"""
        ...
    
    @property
    def hid_object(self): # -> Unknown:
        """Retreive asociated HID device instance"""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, value): # -> None:
        """set report item value"""
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def has_key(self, key): # -> bool:
        """Test for key (as standard dicts)"""
        ...
    
    def items(self): # -> list[tuple[Unknown, Unknown]]:
        """Return key, value pairs (as standard dicts)"""
        ...
    
    def keys(self): # -> dict_keys[Unknown, Unknown]:
        """Return stored element keys (as standard dicts)"""
        ...
    
    def values(self): # -> dict_values[Unknown, Unknown]:
        """Return stored elements (as standard dicts)"""
        ...
    
    def get_hid_object(self): # -> Unknown:
        """Retreive reference to parent HID device"""
        ...
    
    def get_usages(self): # -> dict[Unknown, Unknown]:
        "Return a dictionary mapping full usages Ids to plain values"
        ...
    
    def set_raw_data(self, raw_data): # -> None:
        """Set usage values based on given raw data, item[0] is report_id,
        length should match 'raw_data_length' value, best performance if
        raw_data is c_ubyte ctypes array object type
        """
        ...
    
    def get_raw_data(self): # -> ReadOnlyList:
        """Get raw HID report based on internal report item settings,
        creates new c_ubytes storage
        """
        ...
    
    def send(self, raw_data=...): # -> None:
        """Prepare HID raw report (unless raw_data is provided) and send
        it to HID device
        """
        ...
    
    def get(self, do_process_raw_report=...): # -> ReadOnlyList:
        "Read report from device"
        ...
    


class HidPUsageCaps:
    """Allow to keep usage parameters (regarless of windows type)
    in a common class."""
    def __init__(self, caps) -> None:
        ...
    
    def inspect(self): # -> dict[Unknown, Unknown]:
        """Retreive dictionary of 'Field: Value' attributes"""
        ...
    


def show_hids(target_vid=..., target_pid=..., output=...): # -> None:
    """Check all HID devices conected to PC hosts."""
    ...

