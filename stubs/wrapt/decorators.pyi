"""
This type stub file was generated by pyright.
"""

from .wrappers import BoundFunctionWrapper, CallableObjectProxy, FunctionWrapper

"""This module implements decorators for implementing other decorators
as well as some commonly used decorators.

"""
PY2 = ...
if PY2:
    string_types = ...
    def exec_(_code_, _globs_=..., _locs_=...): # -> None:
        """Execute code in a namespace."""
        ...
    
else:
    string_types = ...
    exec_ = ...
class _AdapterFunctionCode(CallableObjectProxy):
    def __init__(self, wrapped_code, adapter_code) -> None:
        ...
    
    @property
    def co_argcount(self):
        ...
    
    @property
    def co_code(self):
        ...
    
    @property
    def co_flags(self):
        ...
    
    @property
    def co_kwonlyargcount(self):
        ...
    
    @property
    def co_varnames(self):
        ...
    


class _AdapterFunctionSurrogate(CallableObjectProxy):
    def __init__(self, wrapped, adapter) -> None:
        ...
    
    @property
    def __code__(self): # -> _AdapterFunctionCode:
        ...
    
    @property
    def __defaults__(self):
        ...
    
    @property
    def __kwdefaults__(self):
        ...
    
    @property
    def __signature__(self): # -> Signature:
        ...
    
    if PY2:
        func_code = ...
        func_defaults = ...


class _BoundAdapterWrapper(BoundFunctionWrapper):
    @property
    def __func__(self): # -> _AdapterFunctionSurrogate:
        ...
    
    @property
    def __signature__(self): # -> Any | Signature:
        ...
    
    if PY2:
        im_func = ...


class AdapterWrapper(FunctionWrapper):
    __bound_function_wrapper__ = _BoundAdapterWrapper
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @property
    def __code__(self): # -> _AdapterFunctionCode:
        ...
    
    @property
    def __defaults__(self):
        ...
    
    @property
    def __kwdefaults__(self):
        ...
    
    if PY2:
        func_code = ...
        func_defaults = ...
    @property
    def __signature__(self): # -> Signature:
        ...
    


class AdapterFactory:
    def __call__(self, wrapped):
        ...
    


class DelegatedAdapterFactory(AdapterFactory):
    def __init__(self, factory) -> None:
        ...
    
    def __call__(self, wrapped):
        ...
    


adapter_factory = DelegatedAdapterFactory
def decorator(wrapper=..., enabled=..., adapter=..., proxy=...): # -> AdapterWrapper | FunctionWrapper | partial[Unknown]:
    ...

def synchronized(wrapped): # -> _PartialDecorator | _FinalDecorator:
    class _FinalDecorator(FunctionWrapper):
        ...
    
    

