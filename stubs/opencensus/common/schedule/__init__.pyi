"""
This type stub file was generated by pyright.
"""

import logging
import threading
import time
from six.moves import queue

logger = ...
class PeriodicTask(threading.Thread):
    """Thread that periodically calls a given function.

    :type interval: int or float
    :param interval: Seconds between calls to the function.

    :type function: function
    :param function: The function to call.

    :type args: list
    :param args: The args passed in while calling `function`.

    :type kwargs: dict
    :param kwargs: The kwargs passed in while calling `function`.

    :type name: str
    :param name: The source of the worker. Used for naming.
    """
    def __init__(self, interval, function, args=..., kwargs=..., name=...) -> None:
        ...
    
    def run(self): # -> None:
        ...
    
    def cancel(self): # -> None:
        ...
    


class QueueEvent:
    def __init__(self, name) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def set(self): # -> None:
        ...
    
    def wait(self, timeout=...): # -> bool:
        ...
    


class QueueExitEvent(QueueEvent):
    ...


class Queue:
    def __init__(self, capacity) -> None:
        ...
    
    def gets(self, count, timeout): # -> tuple[Unknown, ...]:
        ...
    
    def is_empty(self): # -> bool:
        ...
    
    def flush(self, timeout=...): # -> float | Literal[0] | None:
        ...
    
    def put(self, item, block=..., timeout=...): # -> None:
        ...
    
    def puts(self, items, block=..., timeout=...): # -> None:
        ...
    


