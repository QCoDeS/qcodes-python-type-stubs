"""
This type stub file was generated by pyright.
"""

from opencensus.trace.tracers import base

class NoopTracer(base.Tracer):
    """No-op implementation of the :class:`Tracer` interface, all methods are
    no-ops. Should be used when tracing is not enabled or not sampled.
    """
    def __init__(self) -> None:
        ...
    
    def finish(self): # -> None:
        """End spans and send to reporter."""
        ...
    
    def span(self, name=...): # -> BlankSpan:
        """Create a new span with the trace using the context information.

        :type name: str
        :param name: The name of the span.

        :rtype: :class:`~opencensus.trace.trace_span.Span`
        :returns: The Span object.
        """
        ...
    
    def start_span(self, name=...): # -> BlankSpan:
        """Start a span.

        :type name: str
        :param name: The name of the span.

        :rtype: :class:`~opencensus.trace.trace_span.Span`
        :returns: The Span object.
        """
        ...
    
    def end_span(self): # -> None:
        """End a span. Remove the span from the span stack, and update the
        span_id in TraceContext as the current span_id which is the peek
        element in the span stack.
        """
        ...
    
    def current_span(self): # -> BlankSpan:
        """Return the current span."""
        ...
    
    def add_attribute_to_current_span(self, attribute_key, attribute_value): # -> None:
        """Add attribute to current span.

        :type attribute_key: str
        :param attribute_key: Attribute key.

        :type attribute_value:str
        :param attribute_value: Attribute value.
        """
        ...
    
    def list_collected_spans(self): # -> None:
        """List collected spans."""
        ...
    


