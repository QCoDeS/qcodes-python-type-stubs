"""
This type stub file was generated by pyright.
"""

from opencensus.trace import base_span

class BlankSpan(base_span.BaseSpan):
    """A BlankSpan is an individual timed event which forms a node of the trace
    tree. All operations are no-op.

    :type name: str
    :param name: The name of the span.

    :type parent_span: :class:`~opencensus.trace.blank_span.BlankSpan`
    :param parent_span: (Optional) Parent span.

    :type status: :class: `~opencensus.trace.status.Status`
    :param status: (Optional) An optional final status for this span.

    :type context_tracer: :class:`~opencensus.trace.tracers.noop_tracer.
                                 NoopTracer`
    :param context_tracer: The tracer that holds a stack of spans. If this is
                           not None, then when exiting a span, use the end_span
                           method in the tracer class to finish a span. If no
                           tracer is passed in, then just finish the span using
                           the finish method in the Span class.
    """
    def __init__(self, name=..., parent_span=..., attributes=..., start_time=..., end_time=..., span_id=..., stack_trace=..., annotations=..., message_events=..., links=..., status=..., same_process_as_parent_span=..., context_tracer=..., span_kind=...) -> None:
        ...
    
    @staticmethod
    def on_create(callback): # -> None:
        ...
    
    @property
    def children(self): # -> list[Unknown]:
        """The child spans of the current BlankSpan."""
        ...
    
    def span(self, name=...): # -> BlankSpan:
        """Create a child span for the current span and append it to the child
        spans list.

        :type name: str
        :param name: (Optional) The name of the child span.

        :rtype: :class: `~opencensus.trace.blankspan.BlankSpan`
        :returns: A child Span to be added to the current span.
        """
        ...
    
    def add_attribute(self, attribute_key, attribute_value): # -> None:
        """No-op implementation of this method.

        :type attribute_key: str
        :param attribute_key: Attribute key.

        :type attribute_value:str
        :param attribute_value: Attribute value.
        """
        ...
    
    def add_annotation(self, description, **attrs): # -> None:
        """No-op implementation of this method.

        :type description: str
        :param description: A user-supplied message describing the event.
                        The maximum length for the description is 256 bytes.

        :type attrs: kwargs
        :param attrs: keyworded arguments e.g. failed=True, name='Caching'
        """
        ...
    
    def add_message_event(self, message_event): # -> None:
        """No-op implementation of this method.

        :type message_event: :class:`opencensus.trace.time_event.MessageEvent`
        :param message_event: The message event to attach to this span.
        """
        ...
    
    def add_link(self, link): # -> None:
        """No-op implementation of this method.

        :type link: :class: `~opencensus.trace.link.Link`
        :param link: A Link object.
        """
        ...
    
    def set_status(self, status): # -> None:
        """No-op implementation of this method.

        :type code: :class: `~opencensus.trace.status.Status`
        :param code: A Status object.
        """
        ...
    
    def start(self): # -> None:
        """No-op implementation of this method."""
        ...
    
    def finish(self): # -> None:
        """No-op implementation of this method."""
        ...
    
    def __iter__(self): # -> Generator[Self@BlankSpan, None, None]:
        """Iterate through the span tree."""
        ...
    
    def __enter__(self): # -> Self@BlankSpan:
        """Start a span."""
        ...
    
    def __exit__(self, exception_type, exception_value, traceback): # -> None:
        """Finish a span."""
        ...
    


