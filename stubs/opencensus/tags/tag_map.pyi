"""
This type stub file was generated by pyright.
"""

class TagMap:
    """ A tag map is a map of tags from key to value

    :type tags: list(:class: '~opencensus.tags.tag.Tag')
    :param tags: a list of tags

    """
    def __init__(self, tags=...) -> None:
        ...
    
    def __iter__(self): # -> Iterator[tuple[Any, Any]]:
        ...
    
    def insert(self, key, value): # -> None:
        """Inserts a key and value in the map if the map does not already
        contain the key.

        :type key: :class: '~opencensus.tags.tag_key.TagKey'
        :param key: a tag key to insert into the map

        :type value: :class: '~opencensus.tags.tag_value.TagValue'
        :param value: a tag value that is associated with the tag key and
        the value to insert into the tag map

        """
        ...
    
    def delete(self, key): # -> None:
        """Deletes a tag from the map if the key is in the map

        :type key: :class: '~opencensus.tags.tag_key.TagKey'
        :param key: A string representing a possible tag key

        :returns: the value of the key in the dictionary if it is in there,
                  or None if it is not.
        """
        ...
    
    def update(self, key, value): # -> None:
        """Updates the map by updating the value of a key

        :type key: :class: '~opencensus.tags.tag_key.TagKey'
        :param key: A tag key to be updated

        :type value: :class: '~opencensus.tags.tag_value.TagValue'
        :param value: The value to update the key to in the map

        """
        ...
    
    def tag_key_exists(self, key): # -> bool:
        """Checking if the tag key exists in the map

        :type key: '~opencensus.tags.tag_key.TagKey'
        :param key: A string to check to see if that is a key in the map

        :returns: True if the key is in map, False is it is not

        """
        ...
    
    def get_value(self, key): # -> Any:
        """ Gets the value of the key passed in if the key exists in the map

        :type key: str
        :param key: A string representing a key to get the value of in the map

        :returns: A KeyError if the value is None, else returns the value

        """
        ...
    


