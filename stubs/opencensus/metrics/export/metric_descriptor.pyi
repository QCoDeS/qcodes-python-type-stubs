"""
This type stub file was generated by pyright.
"""

import six

class _MetricDescriptorTypeMeta(type):
    """Helper for `x in MetricDescriptorType`."""
    def __contains__(cls, item): # -> bool:
        ...
    


@six.add_metaclass(_MetricDescriptorTypeMeta)
class MetricDescriptorType:
    """The kind of metric. It describes how the data is reported.

    MetricDescriptorType is an enum of valid MetricDescriptor type values. See
    opencensus-proto for details:

    https://github.com/census-instrumentation/opencensus-proto/blob/v0.1.0/src/opencensus/proto/metrics/v1/metrics.proto#L79

    A gauge is an instantaneous measurement of a value.

    A cumulative measurement is a value accumulated over a time interval. In a
    time series, cumulative measurements should have the same start time and
    increasing end times, until an event resets the cumulative value to zero
    and sets a new start time for the following points.

    """
    GAUGE_INT64 = ...
    GAUGE_DOUBLE = ...
    GAUGE_DISTRIBUTION = ...
    CUMULATIVE_INT64 = ...
    CUMULATIVE_DOUBLE = ...
    CUMULATIVE_DISTRIBUTION = ...
    SUMMARY = ...
    _type_map = ...
    @classmethod
    def to_type_class(cls, metric_descriptor_type):
        ...
    


class MetricDescriptor:
    """Defines a metric type and its schema.

    This class implements the spec for v1 MetricDescriptors, as of
    opencensus-proto release v0.1.0. See opencensus-proto for details:

    https://github.com/census-instrumentation/opencensus-proto/blob/v0.1.0/src/opencensus/proto/metrics/v1/metrics.proto#L59

    :type name: str
    :param name: The metric type, including its DNS name prefix. It must be
    unique.

    :type description: str
    :param description: A detailed description of the metric, which can be used
    in documentation.

    :type unit: str
    :param unit: The unit in which the metric value is reported. Follows the
    format described by http://unitsofmeasure.org/ucum.html.

    :type type_: int
    :param type_: The type of metric. MetricDescriptorType enumerates the valid
    options.

    :type label_keys: list(:class: '~opencensus.metrics.label_key.LabelKey')
    :param label_keys: The label keys associated with the metric descriptor.
    """
    def __init__(self, name, description, unit, type_, label_keys) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def name(self): # -> Unknown:
        ...
    
    @property
    def description(self): # -> Unknown:
        ...
    
    @property
    def unit(self): # -> Unknown:
        ...
    
    @property
    def type(self): # -> Unknown:
        ...
    
    @property
    def label_keys(self):
        ...
    


