"""
This type stub file was generated by pyright.
"""

from opencensus.metrics.export import metric_producer

def get_timeseries_list(points, timestamp): # -> list[Unknown]:
    """Convert a list of `GaugePoint`s into a list of `TimeSeries`.

    Get a :class:`opencensus.metrics.export.time_series.TimeSeries` for each
    measurement in `points`. Each series contains a single
    :class:`opencensus.metrics.export.point.Point` that represents the last
    recorded value of the measurement.

    :type points: list(:class:`GaugePoint`)
    :param points: The list of measurements to convert.

    :type timestamp: :class:`datetime.datetime`
    :param timestamp: Recording time to report, usually the current time.

    :rtype: list(:class:`opencensus.metrics.export.time_series.TimeSeries`)
    :return: A list of one `TimeSeries` for each point in `points`.
    """
    ...

class GaugePoint:
    def to_point_value(self):
        ...
    
    def get_value(self):
        ...
    


class GaugePointLong(GaugePoint):
    """An instantaneous measurement from a LongGauge.

    A GaugePointLong represents the most recent measurement from a
    :class:`LongGauge` for a given set of label values.
    """
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def add(self, val): # -> None:
        """Add `val` to the current value.

        :type val: int
        :param val: Value to add.
        """
        ...
    
    def set(self, val): # -> None:
        """Set the current value to `val`.

        :type val: int
        :param val: Value to set.
        """
        ...
    
    def get_value(self): # -> int:
        """Get the current value.

        :rtype: int
        :return: The current value of the measurement.
        """
        ...
    
    def to_point_value(self): # -> ValueLong:
        """Get a point value conversion of the current value.

        :rtype: :class:`opencensus.metrics.export.value.ValueLong`
        :return: A converted `ValueLong`.
        """
        ...
    


class GaugePointDouble(GaugePoint):
    """An instantaneous measurement from a DoubleGauge.

    A `GaugePointDouble` represents the most recent measurement from a
    :class:`DoubleGauge` for a given set of label values.
    """
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def add(self, val): # -> None:
        """Add `val` to the current value.

        :type val: float
        :param val: Value to add.
        """
        ...
    
    def set(self, val): # -> None:
        """Set the current value to `val`.

        :type val: float
        :param val: Value to set.
        """
        ...
    
    def get_value(self): # -> float:
        """Get the current value.

        :rtype: float
        :return: The current value of the measurement.
        """
        ...
    
    def to_point_value(self): # -> ValueDouble:
        """Get a point value conversion of the current value.

        :rtype: :class:`opencensus.metrics.export.value.ValueDouble`
        :return: A converted `ValueDouble`.
        """
        ...
    


class DerivedGaugePoint(GaugePoint):
    """Wraps a `GaugePoint` to automatically track the value of a function.

    A `DerivedGaugePoint` is a read-only measure that stores the most recently
    read value of a given function in a mutable `GaugePoint`. Calling
    `get_value` or `to_point_value` calls the tracked function and updates the
    wrapped `GaugePoint`.

    :type func: function
    :param func: The function to track.

    :type gauge_point: :class:`GaugePointLong`, :class:`GaugePointDouble`,
        :class:`opencensus.metrics.export.cumulative.CumulativePointLong`, or
        :class:`opencensus.metrics.export.cumulative.CumulativePointDouble`
    :param gauge_point: The underlying `GaugePoint`.
    """
    def __init__(self, func, gauge_point, **kwargs) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def get_value(self): # -> None:
        """Get the current value of the underlying measurement.

        Calls the tracked function and stores the value in the wrapped
        measurement as a side-effect.

        :rtype: int, float, or None
        :return: The current value of the wrapped function, or `None` if it no
            longer exists.
        """
        ...
    
    def to_point_value(self): # -> None:
        """Get a point value conversion of the current value.

        Calls the tracked function and stores the value in the wrapped
        measurement as a side-effect.

        :rtype: :class:`opencensus.metrics.export.value.ValueLong`,
            :class:`opencensus.metrics.export.value.ValueDouble`, or None
        :return: The point value conversion of the underlying `GaugePoint`, or
            None if the tracked function no longer exists.
        """
        ...
    


class BaseGauge:
    """Base class for sets instantaneous measurements."""
    def __init__(self, name, description, unit, label_keys) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def remove_time_series(self, label_values): # -> None:
        """Remove the time series for specific label values.

        :type label_values: list(:class:`LabelValue`)
        :param label_values: Label values of the time series to remove.
        """
        ...
    
    def remove_default_time_series(self): # -> None:
        """Remove the default time series for this gauge."""
        ...
    
    def clear(self): # -> None:
        """Remove all points from this gauge."""
        ...
    
    def get_metric(self, timestamp): # -> Metric | None:
        """Get a metric including all current time series.

        Get a :class:`opencensus.metrics.export.metric.Metric` with one
        :class:`opencensus.metrics.export.time_series.TimeSeries` for each
        set of label values with a recorded measurement. Each `TimeSeries`
        has a single point that represents the last recorded value.

        :type timestamp: :class:`datetime.datetime`
        :param timestamp: Recording time to report, usually the current time.

        :rtype: :class:`opencensus.metrics.export.metric.Metric` or None
        :return: A converted metric for all current measurements.
        """
        ...
    
    @property
    def descriptor_type(self):
        ...
    
    @property
    def point_type(self):
        ...
    


class Gauge(BaseGauge):
    """A set of mutable, instantaneous measurements of the same type.

    End users should use :class:`LongGauge`, :class:`DoubleGauge`,
    :class:`opencensus.metrics.export.cumulative.LongCumulative`, or
    :class:`opencensus.metrics.export.cumulative.DoubleCumulative` instead of
    using this class directly.

    The constructor arguments are used to create a
    :class:`opencensus.metrics.export.metric_descriptor.MetricDescriptor` for
    converted metrics. See that class for details.
    """
    def get_or_create_time_series(self, label_values):
        """Get a mutable measurement for the given set of label values.

        :type label_values: list(:class:`LabelValue`)
        :param label_values: The measurement's label values.

        :rtype: :class:`GaugePointLong`, :class:`GaugePointDouble`
            :class:`opencensus.metrics.export.cumulative.CumulativePointLong`,
            or
            :class:`opencensus.metrics.export.cumulative.CumulativePointDouble`
        :return: A mutable point that represents the last value of the
            measurement.
        """
        ...
    
    def get_or_create_default_time_series(self):
        """Get the default measurement for this gauge.

        Each gauge has a default point not associated with any specific label
        values. When this gauge is exported as a metric via `get_metric` the
        time series associated with this point will have null label values.

        :rtype: :class:`GaugePointLong`, :class:`GaugePointDouble`
            :class:`opencensus.metrics.export.cumulative.CumulativePointLong`,
            or
            :class:`opencensus.metrics.export.cumulative.CumulativePointDouble`
        :return: A mutable point that represents the last value of the
            measurement.
        """
        ...
    


class LongGaugeMixin:
    """Type mixin for long-valued gauges."""
    descriptor_type = ...
    point_type = GaugePointLong


class DoubleGaugeMixin:
    """Type mixin for float-valued gauges."""
    descriptor_type = ...
    point_type = GaugePointDouble


class LongGauge(LongGaugeMixin, Gauge):
    """Gauge for recording int-valued measurements."""
    ...


class DoubleGauge(DoubleGaugeMixin, Gauge):
    """Gauge for recording float-valued measurements."""
    ...


class DerivedGauge(BaseGauge):
    """Gauge that tracks values of other functions.

    Each of a `DerivedGauge`'s measurements are associated with a function
    which is called when the gauge is exported.

    End users should use :class:`DerivedLongGauge`, :class:`DerivedDoubleGauge`
    :class:`opencensus.metrics.export.cumulative.DerivedLongCumulative`, or
    :class:`opencensus.metrics.export.cumulative.DerivedDoubleCumulative`
    instead of using this class directly.
    """
    def create_time_series(self, label_values, func, **kwargs):
        """Create a derived measurement to trac `func`.

        :type label_values: list(:class:`LabelValue`)
        :param label_values: The measurement's label values.

        :type func: function
        :param func: The function to track.

        :rtype: :class:`DerivedGaugePoint`
        :return: A read-only measurement that tracks `func`.
        """
        ...
    
    def create_default_time_series(self, func):
        """Create the default derived measurement for this gauge.

        :type func: function
        :param func: The function to track.

        :rtype: :class:`DerivedGaugePoint`
        :return: A read-only measurement that tracks `func`.
        """
        ...
    


class DerivedLongGauge(LongGaugeMixin, DerivedGauge):
    """Gauge for derived int-valued measurements."""
    ...


class DerivedDoubleGauge(DoubleGaugeMixin, DerivedGauge):
    """Gauge for derived float-valued measurements."""
    ...


class Registry(metric_producer.MetricProducer):
    """A collection of gauges to be exported together.

    Each registered gauge must have a unique `descriptor.name`.
    """
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def add_gauge(self, gauge): # -> None:
        """Add `gauge` to the registry.

        Raises a `ValueError` if another gauge with the same name already
        exists in the registry.

        :type gauge: class:`LongGauge`, class:`DoubleGauge`,
            :class:`opencensus.metrics.export.cumulative.LongCumulative`,
            :class:`opencensus.metrics.export.cumulative.DoubleCumulative`,
            :class:`DerivedLongGauge`, :class:`DerivedDoubleGauge`
            :class:`opencensus.metrics.export.cumulative.DerivedLongCumulative`,
            or
            :class:`opencensus.metrics.export.cumulative.DerivedDoubleCumulative`
        :param gauge: The gauge to add to the registry.
        """
        ...
    
    def get_metrics(self): # -> set[Unknown]:
        """Get a metric for each gauge in the registry at the current time.

        :rtype: set(:class:`opencensus.metrics.export.metric.Metric`)
        :return: A set of `Metric`s, one for each registered gauge.
        """
        ...
    


