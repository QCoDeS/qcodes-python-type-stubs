"""
This type stub file was generated by pyright.
"""

import threading

__all__ = ['RuntimeContext']
class _RuntimeContext:
    @classmethod
    def clear(cls):
        """Clear all slots to their default value."""
        ...
    
    @classmethod
    def register_slot(cls, name, default=...):
        """Register a context slot with an optional default value.

        :type name: str
        :param name: The name of the context slot.

        :type default: object
        :param name: The default value of the slot, can be a value or lambda.

        :returns: The registered slot.
        """
        ...
    
    def apply(self, snapshot): # -> None:
        """Set the current context from a given snapshot dictionary"""
        ...
    
    def snapshot(self): # -> dict[Unknown, Unknown]:
        """Return a dictionary of current slots by reference."""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __getattr__(self, name):
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def with_current_context(self, func): # -> (*args: Unknown, **kwargs: Unknown) -> Unknown:
        """Capture the current context and apply it to the provided func"""
        ...
    


class _ThreadLocalRuntimeContext(_RuntimeContext):
    _lock = ...
    _slots = ...
    class Slot:
        _thread_local = ...
        def __init__(self, name, default) -> None:
            ...
        
        def clear(self): # -> None:
            ...
        
        def get(self): # -> Any:
            ...
        
        def set(self, value): # -> None:
            ...
        
    
    
    @classmethod
    def clear(cls): # -> None:
        ...
    
    @classmethod
    def register_slot(cls, name, default=...): # -> Slot:
        ...
    


class _AsyncRuntimeContext(_RuntimeContext):
    _lock = ...
    _slots = ...
    class Slot:
        def __init__(self, name, default) -> None:
            ...
        
        def clear(self): # -> None:
            ...
        
        def get(self):
            ...
        
        def set(self, value): # -> None:
            ...
        
    
    
    @classmethod
    def clear(cls): # -> None:
        ...
    
    @classmethod
    def register_slot(cls, name, default=...): # -> Slot:
        ...
    


RuntimeContext = ...
if contextvars:
    RuntimeContext = ...
