"""
This type stub file was generated by pyright.
"""

MAX_FRAMES = ...
BUILD_ID = ...
SOURCE_VERSION = ...
class StackFrame:
    """Represents a single stack frame in a stack trace.

    :type func_name: str
    :param func_name: The fully-qualified name that uniquely identifies the
                      function or method that is active in this frame (up to
                      1024 bytes).

    :type original_func_name: str
    :param original_func_name: An un-mangled function name, if functionName is
                               mangled. The name can be fully-qualified
                               (up to 1024 bytes).

    :type file_name: str
    :param file_name: The name of the source file where the function call
                      appears (up to 256 bytes).

    :type line_num: int
    :param line_num: The line number in fileName where the function call
                     appears.

    :type col_num: int
    :param col_num: The column number where the function call appears, if
                    available. This is important in JavaScript because of its
                    anonymous functions.

    :type load_module: str
    :param load_module: For example: main binary, kernel modules, and dynamic
                        libraries such as libc.so, sharedlib.so
                        (up to 256 bytes).

    :type build_id: str
    :param build_id: A unique identifier for the module, usually a hash of its
                    contents (up to 128 bytes).


    :type source_version: str
    :param source_version: The version of the deployed source code
                           (up to 128 bytes).
    """
    def __init__(self, func_name, original_func_name, file_name, line_num, col_num, load_module, build_id, source_version) -> None:
        ...
    
    def format_stack_frame_json(self): # -> dict[Unknown, Unknown]:
        """Convert StackFrame object to json format."""
        ...
    


class StackTrace:
    """A call stack appearing in a trace.

    :type stack_frames: list
    :param stack_frames: Stack frames in this stack trace. A maximum of 128
                         frames are allowed.

    :type stack_trace_hash_id: str
    :param stack_trace_hash_id: The hash ID is used to conserve network
                                bandwidth for duplicate stack traces within a
                                single trace.
    """
    def __init__(self, stack_frames=..., stack_trace_hash_id=...) -> None:
        ...
    
    @classmethod
    def from_traceback(cls, tb): # -> Self@StackTrace:
        """Initializes a StackTrace from a python traceback instance"""
        ...
    
    def add_stack_frame(self, stack_frame): # -> None:
        """Add StackFrame to frames list."""
        ...
    
    def format_stack_trace_json(self): # -> dict[Unknown, Unknown]:
        """Convert a StackTrace object to json format."""
        ...
    


def generate_hash_id(): # -> int:
    """Generate a hash id."""
    ...

def generate_hash_id_from_traceback(tb): # -> int:
    ...

