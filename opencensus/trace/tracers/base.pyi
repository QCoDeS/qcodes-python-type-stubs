"""
This type stub file was generated by pyright.
"""

class Tracer:
    """Base class for Opencensus tracers.

    Subclasses of :class:`Tracer` must implement the below methods.
    """
    def finish(self):
        """End the spans and send to reporters."""
        ...
    
    def span(self, name=...):
        """Create a new span with the trace using the context information.

        :type name: str
        :param name: The name of the span.

        :rtype: :class:`~opencensus.trace.span.Span`
        :returns: The Span object.
        """
        ...
    
    def start_span(self, name=...):
        """Start a span.

        :type name: str
        :param name: The name of the span.

        :rtype: :class:`~opencensus.trace.span.Span`
        :returns: The Span object.
        """
        ...
    
    def end_span(self):
        """End a span. Remove the span from the span stack, and update the
        span_id in TraceContext as the current span_id which is the peek
        element in the span stack.
        """
        ...
    
    def current_span(self):
        """Return the current span."""
        ...
    
    def add_attribute_to_current_span(self, attribute_key, attribute_value):
        ...
    
    def list_collected_spans(self):
        """List collected spans."""
        ...
    


class NullContextManager:
    """Empty object as a helper for faking Trace and Span when tracing is
    disabled.
    """
    def __init__(self, span_id=..., context_tracer=...) -> None:
        ...
    
    def __enter__(self): # -> Self@NullContextManager:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    
    def span(self, name=...): # -> NullContextManager:
        ...
    


