"""
This type stub file was generated by pyright.
"""

"""Module containing base class for Span."""
class BaseSpan:
    """Base class for Opencensus spans.
    Subclasses of :class:`BaseSpan` must implement the below methods.
    """
    @staticmethod
    def on_create(callback):
        ...
    
    @property
    def children(self):
        """The child spans of the current span."""
        ...
    
    def span(self, name=...):
        """Create a child span for the current span and append it to the child
        spans list.

        :type name: str
        :param name: (Optional) The name of the child span.

        :rtype: :class: `~opencensus.trace.span.Span`
        :returns: A child Span to be added to the current span.
        """
        ...
    
    def add_attribute(self, attribute_key, attribute_value):
        """Add attribute to span.

        :type attribute_key: str
        :param attribute_key: Attribute key.

        :type attribute_value:str
        :param attribute_value: Attribute value.
        """
        ...
    
    def add_annotation(self, description, **attrs):
        """Add an annotation to span.

        :type description: str
        :param description: A user-supplied message describing the event.
                        The maximum length for the description is 256 bytes.

        :type attrs: kwargs
        :param attrs: keyworded arguments e.g. failed=True, name='Caching'
        """
        ...
    
    def add_message_event(self, message_event):
        """Add a message event to this span.

        :type message_event: :class:`opencensus.trace.time_event.MessageEvent`
        :param message_event: The message event to attach to this span.
        """
        ...
    
    def add_link(self, link):
        """Add a Link.

        :type link: :class: `~opencensus.trace.link.Link`
        :param link: A Link object.
        """
        ...
    
    def set_status(self, status):
        """Sets span status.

        :type code: :class: `~opencensus.trace.status.Status`
        :param code: A Status object.
        """
        ...
    
    def start(self):
        """Set the start time for a span."""
        ...
    
    def finish(self):
        """Set the end time for a span."""
        ...
    
    def __iter__(self):
        """Iterate through the span tree."""
        ...
    
    def __enter__(self):
        """Start a span."""
        ...
    
    def __exit__(self, exception_type, exception_value, traceback):
        """Finish a span."""
        ...
    


