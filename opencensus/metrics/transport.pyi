"""
This type stub file was generated by pyright.
"""

from opencensus.common.schedule import PeriodicTask

logger = ...
DEFAULT_INTERVAL = ...
GRACE_PERIOD = ...
class TransportError(Exception):
    ...


class PeriodicMetricTask(PeriodicTask):
    """Thread that periodically calls a given function.

    :type interval: int or float
    :param interval: Seconds between calls to the function.

    :type function: function
    :param function: The function to call.

    :type args: list
    :param args: The args passed in while calling `function`.

    :type kwargs: dict
    :param args: The kwargs passed in while calling `function`.

    :type name: str
    :param name: The source of the worker. Used for naming.
    """
    daemon = ...
    def __init__(self, interval=..., function=..., args=..., kwargs=..., name=...) -> None:
        ...
    
    def run(self): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


def get_exporter_thread(metric_producers, exporter, interval=...): # -> PeriodicMetricTask:
    """Get a running task that periodically exports metrics.

    Get a `PeriodicTask` that periodically calls:

        export(itertools.chain(*all_gets))

    where all_gets is the concatenation of all metrics produced by the metric
    producers in metric_producers, each calling metric_producer.get_metrics()

    :type metric_producers:
    list(:class:`opencensus.metrics.export.metric_producer.MetricProducer`)
    :param metric_producers: The list of metric producers to use to get metrics

    :type exporter: :class:`opencensus.stats.base_exporter.MetricsExporter`
    :param exporter: The exporter to use to export metrics.

    :type interval: int or float
    :param interval: Seconds between export calls.

    :rtype: :class:`PeriodicTask`
    :return: A running thread responsible calling the exporter.

    """
    ...

