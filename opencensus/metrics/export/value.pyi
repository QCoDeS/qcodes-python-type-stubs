"""
This type stub file was generated by pyright.
"""

"""
The classes in this module implement the spec for v1 Metrics as of
opencensus-proto release v0.1.0. See opencensus-proto for details:

https://github.com/census-instrumentation/opencensus-proto/blob/v0.1.0/src/opencensus/proto/metrics/v1/metrics.proto
"""
class ValueDouble:
    """A 64-bit double-precision floating-point number.

    :type value: float
    :param value: the value in float.
    """
    def __init__(self, value) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def value(self): # -> Unknown:
        ...
    


class ValueLong:
    """A 64-bit integer.

    :type value: long
    :param value: the value in long.
    """
    def __init__(self, value) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def value(self): # -> Unknown:
        ...
    


class ValueSummary:
    """Represents a snapshot values calculated over an arbitrary time window.

    :type value: summary
    :param value: the value in summary.
    """
    def __init__(self, value) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def value(self): # -> Unknown:
        ...
    


class Exemplar:
    """An example point to annotate a given value in a bucket.

    Exemplars are example points that may be used to annotate aggregated
    Distribution values. They are metadata that gives information about a
    particular value added to a Distribution bucket.

    :type value: double
    :param value: Value of the exemplar point, determines which bucket the
    exemplar belongs to.

    :type timestamp: str
    :param timestamp: The observation (sampling) time of the exemplar value.

    :type attachments: dict(str, str)
    :param attachments: Contextual information about the example value.
    """
    def __init__(self, value, timestamp, attachments) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def value(self): # -> Unknown:
        ...
    
    @property
    def timestamp(self): # -> Unknown:
        ...
    
    @property
    def attachments(self): # -> Unknown:
        ...
    


class Bucket:
    """A bucket of a histogram.

    :type count: int
    :param count: The number of values in each bucket of the histogram.

    :type exemplar: Exemplar
    :param exemplar: Optional exemplar for this bucket, omit if the
    distribution does not have a histogram.
    """
    def __init__(self, count, exemplar=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def count(self): # -> Unknown:
        ...
    
    @property
    def exemplar(self): # -> None:
        ...
    


class Explicit:
    """Set of explicit bucket boundaries.

    Specifies a set of buckets with arbitrary upper-bounds.  This defines
    size(bounds) + 1 (= N) buckets. The boundaries for bucket index i are:

        - [0, bounds[i]) for i == 0
        - [bounds[i-1], bounds[i]) for 0 < i < N-1
        - [bounds[i-1], +infinity) for i == N-1
    """
    def __init__(self, bounds) -> None:
        ...
    
    @property
    def bounds(self): # -> Unknown:
        ...
    


class BucketOptions:
    """Container for bucket options, including explicit boundaries.

    A Distribution may optionally contain a histogram of the values in the
    population. The bucket boundaries for that histogram are described by
    BucketOptions.

    If bucket_options has no type, then there is no histogram associated with
    the Distribution.
    """
    def __init__(self, type_=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def type_(self): # -> None:
        ...
    


class ValueDistribution:
    """Summary statistics for a population of values.

    Distribution contains summary statistics for a population of values. It
    optionally contains a histogram representing the distribution of those
    values across a set of buckets.

    :type count: int
    :param count: The number of values in the population.

    :type sum_: float
    :param sum_: The sum of the values in the population.

    :type sum_of_squared_deviation: float
    :param sum_of_squared_deviation: The sum of squared deviations from the
    mean of the values in the population.

    :type bucket_options: :class: 'BucketOptions'
    :param bucket_options: Bucket boundaries for the histogram of the values in
    the population.

    :type buckets: list(:class: 'Bucket')
    :param buckets: Histogram buckets for the given bucket boundaries.
    """
    def __init__(self, count, sum_, sum_of_squared_deviation, bucket_options, buckets=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def count(self):
        ...
    
    @property
    def sum(self): # -> Unknown:
        ...
    
    @property
    def sum_of_squared_deviation(self): # -> Unknown:
        ...
    
    @property
    def bucket_options(self):
        ...
    
    @property
    def buckets(self): # -> None:
        ...
    


